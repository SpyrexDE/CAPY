[gd_scene load_steps=11 format=3 uid="uid://cl2uuvwh4awgd"]

[ext_resource type="Shader" path="res://src/postprocessing/shaders/VibrantGradients.gdshader" id="1_2w72p"]
[ext_resource type="Texture2D" uid="uid://ct4ni2r4xican" path="res://icon.png" id="1_thpp8"]
[ext_resource type="Shader" path="res://src/postprocessing/shaders/ChromaticAberration.gdshader" id="2_1q35y"]
[ext_resource type="Texture2D" uid="uid://cmy6hnlvjjqua" path="res://src/postprocessing/shaders/ChromaticAbberationOffset.png" id="2_ux4tv"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_kaxe8"]
shader = ExtResource("1_2w72p")
shader_param/color = Quaternion(145.584, 190.413, 147, 1)
shader_param/hide = true
shader_param/strength = 8.82

[sub_resource type="ShaderMaterial" id="ShaderMaterial_1p8r6"]
shader = ExtResource("2_1q35y")
shader_param/offset_image = ExtResource("2_ux4tv")
shader_param/strength = 0.05

[sub_resource type="Shader" id="Shader_l4v5t"]
code = "shader_type canvas_item;

uniform int levels = 3;
uniform float spread = 0.01;

vec3 chromatic_slice(float t){
	vec3 res = vec3(1.0-t, 1.0 - abs(t - 1.0), t - 1.0);
	return max(res, 0.0);
}

void fragment(){
	vec3 sum;
	COLOR.rgb = vec3(0);
	vec2 offset = (UV - vec2(0.5))*vec2(1,-1);
	for(int i = 0; i < levels; i++){
		float t = 2.0*float(i)/float(levels-1); // range 0.0->2.0
		vec3 slice = vec3(1.0-t, 1.0 - abs(t - 1.0), t - 1.0);
		slice = max(slice, 0.0);
		sum += slice;
		vec2 slice_offset = (t-1.0)*spread*offset;
		COLOR.rgb += slice * texture(SCREEN_TEXTURE, SCREEN_UV + slice_offset).rgb;
	}
	COLOR.rgb /= sum;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_jih3n"]
shader = SubResource("Shader_l4v5t")
shader_param/levels = 200
shader_param/spread = 0.003

[sub_resource type="Shader" id="Shader_gq6ep"]
code = "shader_type canvas_item;

uniform float vignette_intensity = 0.4;
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;
uniform vec4 vignette_rgb = vec4(0.0, 0.0, 0.0, 1.0);

float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment(){
	vec4 color = texture(SCREEN_TEXTURE, SCREEN_UV);
	vec4 text = texture(TEXTURE, UV);
	
	text.rgba *= (vignette_rgb.rgba);
	text.rgba *= (1.0 - vignette(UV));
	
	COLOR = vec4((text.rgb)*color.rgb,text.a);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_h4m4r"]
shader = SubResource("Shader_gq6ep")
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.2
shader_param/vignette_rgb = null

[node name="PostProcessing" type="CanvasLayer"]

[node name="Icon" type="Sprite2D" parent="."]
visible = false
position = Vector2(643.5, 765.5)
scale = Vector2(11.1094, 3.79688)
texture = ExtResource("1_thpp8")

[node name="VibrantGradients" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_kaxe8")
anchor_right = 1.0
anchor_bottom = 1.0

[node name="ChromaticAberration" type="ColorRect" parent="."]
visible = false
material = SubResource("ShaderMaterial_1p8r6")
anchor_right = 1.0
anchor_bottom = 1.0

[node name="ChromaticAberration2" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_jih3n")
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Vignette" type="ColorRect" parent="."]
material = SubResource("ShaderMaterial_h4m4r")
anchor_right = 1.0
anchor_bottom = 1.0
